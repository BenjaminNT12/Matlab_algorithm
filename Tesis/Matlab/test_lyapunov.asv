% calculo de la matriz de Rigidez

clc
close all
clear

kv = 1;
delt = 1;

T = 0.001;
m = 3
n = 4
l = 7
t = T: T :3;

s1 = sin(2*pi/5);
s2 = sin(4*pi/5);
c1 = cos(2*pi/5);
c2 = cos(pi/5);

% PUNTOS DESEADOS DE LA FORMACION
qd1 = [0,     1, 0];
qd2 = [-s1,  c1, 0];
qd3 = [-s2, -c2, 0];
qd4 = [s2,  -c2, 0];
qd5 = [s1,   c1, 0];

qd = [qd1, qd2, qd3, qd4, qd5];

% "EDGE" DE LA FORMACION (UNIONES)
E1 = [1 2];
E2 = [1 3];
E3 = [1 4];
E4 = [1 5];
E5 = [2 3];
E6 = [3 4];
E7 = [4 5];
 
E = [E1; E2; E3; E4; E5; E6; E7];

%CONDICIONES INICIALES DE LOS PUNTOS DE INICIO DE LA FORMACION
q1 = qd1 + delt*(rand(1,m)-0.5);
q2 = qd2 + delt*(rand(1,m)-0.5);
q3 = qd3 + delt*(rand(1,m)-0.5);
q4 = qd4 + delt*(rand(1,m)-0.5);
q5 = qd5 + delt*(rand(1,m)-0.5);

q = [q1, q2, q3, q4, q5];

qt = zeros(length(E),m);
e = zeros(length(t),length(E));
z = zeros(length(E),1);
d = zeros(length(E),1);


for i = 1:length(q)/2
    plot(q(i*m-2), q(i*m),"x");
    hold on;
end

% DISTANCIA DESEADA DISTANCIA ENTRE LOS PUNTOS OBJETIVOS
for i = 1:length(E)
    d(i) = norm(qd(E(i,1)*m-2:E(i,1)*m) - qd(E(i,2)*m-2:E(i,2)*m));
end

% ALGORITMO CONTROL U = -KV*R*Z

for k = 1:length(t)
    for i = 1:length(E)
        qt(i,:) = q(k,E(i,1)*m-2:E(i,1)*m) - q(k,E(i,2)*m-2:E(i,2)*m);
        e(k,i) = norm(qt(i,:)) - d(i);
        z(i,:) = e(k,i)*(e(k,i) + 2*d(i));
    end
% MATRIZ DE RIGIDEZ DEBE CAMBIARSE DEPENDIENDO DE LA FORMACION DESEADA    
    R1 = [ (q(k, 1*m-2:1*m) - q(k, 2*m-2:2*m)), -(q(k, 1*2-1:1*2) - q(k, 2*2-1:2*2)),                            zeros(1,2),                            zeros(1,2),                            zeros(1,2)];
    R2 = [ (q(k, 1*m-2:1*m) - q(k, 3*m-2:3*m)),                           zeros(1,2),  -(q(k, 1*2-1:1*2) - q(k, 3*2-1:3*2)),                            zeros(1,2),                            zeros(1,2)];
    R3 = [ (q(k, 1*m-2:1*m) - q(k, 4*m-2:4*m)),                           zeros(1,2),                            zeros(1,2),  -(q(k, 1*2-1:1*2) - q(k, 4*2-1:4*2)),                            zeros(1,2)];
    R4 = [ (q(k, 1*m-2:1*m) - q(k, 5*m-2:5*m)),                           zeros(1,2),                            zeros(1,2),                            zeros(1,2),  -(q(k, 1*2-1:1*2) - q(k, 5*2-1:5*2))];
    R5 = [                          zeros(1,m),  (q(k, 2*2-1:2*2) - q(k, 3*2-1:3*2)),  -(q(k, 2*2-1:2*2) - q(k, 3*2-1:3*2)),                            zeros(1,2),                            zeros(1,2)];
    R6 = [                          zeros(1,m),                           zeros(1,2),   (q(k, 3*2-1:3*2) - q(k, 4*2-1:4*2)),  -(q(k, 3*2-1:3*2) - q(k, 4*2-1:4*2)),                            zeros(1,2)];
    R7 = [                          zeros(1,2),                           zeros(1,2),                            zeros(1,2),   (q(k, 4*2-1:4*2) - q(k, 5*2-1:5*2)),  -(q(k, 4*2-1:4*2) - q(k, 5*2-1:5*2))];

    R = [R1; R2; R3; R4; R5; R6; R7];
    
    u = -kv*R'*z;
    
% INTEGRAL qP = u
    for i = 1: 10
        q(k+1,i) = q(k,i)+u(i)*T;
    end

    for i = 1:length(q(end,:))/2
        P(k,i,:) = [q(end, i*2-1), q(end, i*2)];
    end
    Wp(k) = z'*R*u;
    Wp(k)
    W(k) = (1/4)*z'*z;
    W(k)
end


%%% PLOTEA Y GRAFICA TODAS LAS GRAFICAS DE ERROR Y LA TRAYECTORIA DE FORMACION 

figure(1)

framework(q(end,:),E);
xlim([-2 2])
ylim([-2 2])
hold on

for i = 1: length(P(1,:,1))
    plot(P(:,i,1),P(:,i,2));
    hold on
end

figure(2)

for i = 1:length(E)
    plot(t,e(:,i))
    hold on
end

figure(3)

for i = 1:length(E)
    plot(t,Wp)
    hold on
end

figure(4)

for i = 1:length(E)
    plot(t,W)
    hold on
end



















